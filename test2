registerfilebin={"000":"0000000000000000","001":"0000000000000000",
                 "010":"0000000000000000","011":"0000000000000000",
                 "100":"0000000000000000","101":"0000000000000000",
                 "110":"0000000000000000","111":"0000000000000000"}
PC=0
def resetflag():
    registerfilebin["111"][-1]=0
    registerfilebin["111"][-2]=0
    registerfilebin["111"][-3]=0
    registerfilebin["111"][-4]=0

def dectobinary(number):
    if(number==" "):
        return " "
    a=int(number)
    b=bin(a)
    c=str(b)[2:]
    numberofdig=len(c)
    d=""
    for i in range(0,16-numberofdig):
        d=d+"0"
    d=d+c
    return d
def binary_to_decimal(binary):
    decimal = 0
    power = 0
    for bit in reversed(binary):
        if bit == '1':
            decimal=decimal+2**power
        power=power+1
    return decimal
def computenot(s):
    temp=""
    for i in s:
        if(i=="0"):
            temp=temp+"1"
        if(i=="1"):
            temp=temp+"0"
    return temp
def computeand(s1,s2):
    num1=int(s1,2)
    num2=int(s2,2)
    result=num1&num2
    return str(result[2:])
def computeor(s1,s2):
    num1=int(s1,2)
    num2=int(s2,2)
    result=num1|num2
    return str(result[2:])
def computexor(s1,s2):
    num1=int(s1,2)
    num2=int(s2,2)
    result=num1^num2
    return str(result[2:])
def computels(s1,n):
    num=int(s1,2)
    temp=num<<n
    return str(temp)[2+n:]
def computers(s1,n):
    num=int(s1,2)
    temp=num>>n
    return str(temp)[2+n:]
def isadd(s):
    rs1=registerfilebin[s[11:14]]
    rs2=registerfilebin[s[14:]]
    registerfilebin[s[8:11]]=dectobinary(int(binary_to_decimal(rs1)+binary_to_decimal(rs2)))
def ismul(s):
    rd=registerfilebin[s[8:11]]
    rs1=registerfilebin[s[11:14]]
    rs2=registerfilebin[s[14:]]
    registerfilebin[s[8:11]]=dectobinary(int(binary_to_decimal(rs1)*binary_to_decimal(rs2)))
def issub(s):
    rd=registerfilebin[s[8:11]]
    rs1=registerfilebin[s[11:14]]
    rs2=registerfilebin[s[14:]]
    registerfilebin[s[8:11]]=dectobinary(int(binary_to_decimal(rs1)-binary_to_decimal(rs2)))
def isdiv(s):
    rs1=registerfilebin[s[10:13]]
    rs2=registerfilebin[s[13:]]
    registerfilebin["000"]=dectobinary(int(binary_to_decimal(rs1)//binary_to_decimal(rs2)))
    registerfilebin["001"]=dectobinary(int(binary_to_decimal(rs1)%binary_to_decimal(rs2)))
def ismov(s):
    registerfilebin[s[10:13]]=registerfilebin[s[13:]]
def isnot(s):
    registerfilebin[s[10:13]]=computenot(registerfilebin[s[13:]])
def isand(s):
    registerfilebin[s[8:11]]=computeand(registerfilebin[s[11:14]],registerfilebin[s[14:]])
def isor(s):
    registerfilebin[s[8:11]]=computeor(registerfilebin[s[11:14]],registerfilebin[s[14:]])
def isxor(s):
    registerfilebin[s[8:11]]=computexor(registerfilebin[s[11:14]],registerfilebin[s[14:]])
def isls(s):
    registerfilebin[s[7:10]]=computels(registerfilebin[s[7:10]],binary_to_decimal(s[10:]))
def isrs(s):
    registerfilebin[s[7:10]]=computers(registerfilebin[s[7:10]],binary_to_decimal(s[10:]))
def iscmp(s):
    r1=binary_to_decimal(registerfilebin[s[10:13]])
    r2=binary_to_decimal(registerfilebin[s[13:]])
    if(r1>r2):
        registerfilebin["111"][-2]=1
        registerfilebin["111"][-1]=0
        registerfilebin["111"][-3]=0
    if(r1<r2):
        registerfilebin["111"][-2]=0
        registerfilebin["111"][-1]=0
        registerfilebin["111"][-3]=1
    if(r1==r2):
        registerfilebin["111"][-2]=0
        registerfilebin["111"][-1]=1
        registerfilebin["111"][-3]=0
def isjmp(s):
    global PC
    PC=binary_to_decimal(s[10:])
    return 1
def isjlt(s):
    if(registerfilebin["111"][-3]==1):
        global PC
        PC=binary_to_decimal(s[10:])
        return 1
    return 0
def isje(s):
    if(registerfilebin["111"][-1]==1):
        global PC
        PC=binary_to_decimal(s[10:])
        return 1
    return 0
def isjgt(s):
    if(registerfilebin["111"][-2]==1):
        global PC
        PC=binary_to_decimal(s[10:])
        return 1
    return 0
def ismovimm(s):
    a=binary_to_decimal(s[9:])
    a=dectobinary(a)
    registerfilebin[s[6:9]]=a

